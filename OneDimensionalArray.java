/*
 *This file contains all the code related to the One-Dimensional Array processing. 
 */

public class OneDimensionalArray {
    //global variables
    final static int ROW = 10;
    final static int MIN = 100;
    final static int MAX= 999;
    
    /** Calls the entry point for this program. (In case user wishes to run program from current file.) 
    * @param args - Null: Not used in this program.  
    */ 
    public static void main(String[] args) {
    
       CIS131_HannahKlecan_Lab4.main(null);
    }   

    /*********************************************************************************************************
     * ONE DIMENSIONAL ARRAY CREATION, PROCESSING & OUTPUT
     *********************************************************************************************************/

    /**
     * This module acts as the control center for one-dimensional array processing. Separating this code from main makes
     * the code easier to read and debug.
     */
    public static void oneDimensionalProcessing(){

        System.out.println("\n************************************");
        System.out.println("      One-Dimensional Processing");
        System.out.println("************************************");

        int[] array1D = new int[ROW];

        createArray(array1D);
        printArray(array1D, "unsorted");

        int lowestIndex = getLowestValueIndex(array1D);
        int highestIndex = getHighestValueIndex(array1D);
        int sum = getSum(array1D);
        double average = getAverage(array1D);

        printResults(array1D, lowestIndex, highestIndex, sum, average);

        sortArray(array1D);
        printArray(array1D, "sorted");

    }

    /**
     * This module builds the 1d array for the user
     * @param theArray represents the 1d array that will be referenced throughout the program.
     */
    public static void createArray(int [] theArray){
        int newValue;

        for (int i = 0; i < theArray.length; i++) {
            newValue = IR4.getRandomNumber(MIN, MAX);
            //if the value is not unique, a new value should be generated.
            while(!isValueUnique(theArray,newValue)){
                newValue = IR4.getRandomNumber(MIN, MAX);
            }
            theArray[i]=newValue;
        }
    }
    /**
     * This function ensures that the 1d array that was generated has unique values.The function checks each array value
     * with the current value that is generated by the created1DArray module.
     * @param theArray represents the 1d array that was generated.
     * @param value represents the current value being checked
     */
    public static boolean isValueUnique(int[] theArray, int value){

        for (int i = 0; i < theArray.length; i++) {
            if(value == theArray[i]){
                //for testing purposes, indicates when a value is found to be NOT unique
                //System.out.println("found duplicate");
                return false;
            }
        }
        return true;
    }

    /**
     * This module prints the data obtained through the program for the 1D array.
     * @param theArray represents the 1d array being used throughout the program.
     * @param lowestIndex the index of the array that contains the lowest value of the array.
     * @param highestIndex the index of the array that contains the highest value of the array.
     * @param sum the sum of all the elements in the array.
     * @param average the average of all the elements in the array.
     */
    public static void printResults(int [] theArray, int lowestIndex, int highestIndex, int sum, double average){

        System.out.println("\nThe index of the highest value is " + highestIndex +".  Its value is " + theArray[highestIndex] + ".");
        System.out.println("The index of the lowest value is " + lowestIndex +".  Its value is " + theArray[lowestIndex] + ".");
        System.out.println("The sum of the " + ROW + " array elements is " + sum + ".");
        System.out.println("The average of the " + ROW + " array elements is " + average + ".\n");
    }

    /**
     * This module prints the contents of the 1D array
     * @param theArray represents the 1d array that has been generated.
     */
    public static void printArray(int[] theArray, String msgEdit){

        System.out.printf("Auto-generated Array Elements:  (%s)\n", msgEdit);

        for(int i = 0; i < theArray.length;i++){
            System.out.print(theArray[i]+ "  ");
        }
        System.out.println();
    }

    /**
     * This function finds the index with the lowest value.
     * @param theArray represents the 1d array being used throughout the program
     * @return lowestIndex the index where the lowest value of the array was found.
     */
    public static int getLowestValueIndex(int [] theArray){
        int lowestIndex = 0;

        for(int i = 0; i < theArray.length; i++){
            if(theArray[i] < theArray[lowestIndex]){
                lowestIndex=i;
            }
        }
        return lowestIndex;
    }

    /**
     * This function finds the index with the highest value.
     * @param theArray represents the 1d array being used throughout the program
     * @return highestIndex the index where the highest value of the array was found.
     */
    public static int getHighestValueIndex(int [] theArray){
        int highestIndex = 0;

        for(int i = 0; i < theArray.length; i++){
            if (theArray[i] > theArray[highestIndex]){
                highestIndex=i;
            }
        }
        return highestIndex;
    }

    /**
     * This function finds the sum of the 1d array
     * @param theArray represents the 1d array being used throughout the program
     * @return sum of the array values
     */
    public static int getSum(int [] theArray){
        int sum = 0;

        for(int i = 0; i < theArray.length; i++){
            sum = sum + theArray[i];
        }
        return sum;
    }

    /**
     * This function finds the average of all the values in the array.
     * @param theArray represents the 1d array being used throughout the program
     * @return average the average of the values in the array.
     */
    public static double getAverage(int[] theArray){

        int sum = getSum(theArray);

        double average = (double)sum/ theArray.length;

        return average;
    }

    /**
     * This module sorts the elements of the array in ascending order using the insertion method.
     * @param theArray represents the 1d array being used throughout the program.
     */
    public static void sortArray(int[] theArray){

        //insertion method
        for (int i = 1; i < theArray.length; i++) {
            int currentElement = theArray[i];
            int j;

            for(j=i-1; j>= 0 && theArray[j] >currentElement; j--){
                theArray[j+1] = theArray[j];
            }
            theArray[j+1] = currentElement;
        }

    }


}
